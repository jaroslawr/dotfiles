#!/usr/bin/python

import sys

from colorsys import hls_to_rgb
from dataclasses import dataclass


@dataclass
class Color:
    name: str
    h: float
    s: float
    l: float
    comment: str | None = None

    def to_rgb(self):
        r, g, b = hls_to_rgb(self.h/360, self.l, self.s)
        return (round(r*255), round(g*255), round(b*255))

    def to_rgbhex(self):
        return "#%02x%02x%02x" % self.to_rgb()


global colors
colors = {}


def defcolor(**kwargs):
    colors[kwargs['name']] = Color(**kwargs)


def emit_output(output):
    print(output)


def emit_test_output(output, bg: Color, fg: Color):
    br, bg, bb = bg.to_rgb()
    sys.stderr.write(f"\x1b[48;2;{br};{bg};{bb}m")

    fr, fg, fb = fg.to_rgb()
    sys.stderr.write(f"\x1b[38;2;{fr};{fg};{fb}m")

    sys.stderr.write(output)
    sys.stderr.write("\x1b[0m\n")


# Tunables

grayscale_h = 195
grayscale_s = 0.16
grayscale_count = 40

black_h = grayscale_h
black_s = grayscale_s
black_l = 0.16

white_h = grayscale_h
white_s = 1.0
white_l = 0.98

normal_s = 1.00
normal_l = 0.78

bright_s = 1.00
bright_l = 0.70

gray1_h = grayscale_h
gray1_s = grayscale_s
gray1_l = 0.8

gray2_h = grayscale_h
gray2_s = grayscale_s
gray2_l = 0.65

# UI color ranges (hue+sat pairs)
ui_colors = [(grayscale_h, 2*grayscale_s), (345, 2*grayscale_s)]
# ui_count colors at increasing lightness for each hue+sat in ui_colors
ui_count = 40

# Define colors to use as standard ANSI terminal colors

defcolor(name="BLACK",          h=black_h, s=black_s,     l=black_l)   # 0
defcolor(name="RED",            h=345,     s=normal_s,    l=normal_l)  # 1
defcolor(name="GREEN",          h=160,     s=normal_s,    l=normal_l)  # 2
defcolor(name="YELLOW",         h=45,      s=normal_s,    l=normal_l)  # 3
defcolor(name="BLUE",           h=195,     s=normal_s,    l=normal_l)  # 4
defcolor(name="MAGENTA",        h=20,      s=normal_s,    l=normal_l)  # 5
defcolor(name="CYAN",           h=190,     s=normal_s,    l=normal_l)  # 6
defcolor(name="GRAY",           h=gray1_h, s=gray1_s,     l=gray1_l)   # 7
defcolor(name="BRIGHT_GRAY",    h=gray2_h, s=gray2_s,     l=gray2_l)   # 8
defcolor(name="BRIGHT_RED",     h=345,     s=bright_s,    l=bright_l)  # 9
defcolor(name="BRIGHT_GREEN",   h=160,     s=bright_s,    l=bright_l)  # 10
defcolor(name="BRIGHT_YELLOW",  h=45,      s=bright_s,    l=bright_l)  # 11
defcolor(name="BRIGHT_BLUE",    h=195,     s=bright_s,    l=bright_l)  # 12
defcolor(name="BRIGHT_MAGENTA", h=20,      s=bright_s,    l=bright_l)  # 13
defcolor(name="BRIGHT_CYAN",    h=190,     s=bright_s,    l=bright_l)  # 14
defcolor(name="BRIGHT_WHITE",   h=white_h, s=white_s,     l=white_l)   # 15

# Write out COLOR_{name} environment variables with escape codes for ANSI colors

for i, color in enumerate(colors.values()):
    print(f"export COLOR_{color.name}=\"\\[$(tput setaf {i})\\]\"")

print()

# Define grayscale color range
grayscale_l_step = 1.0/grayscale_count
for i in range(grayscale_count):
    defcolor(name=f"GRAY_{i+1}", h=grayscale_h, s=grayscale_s, l=i*grayscale_l_step)

# Define UI color ranges

ui_l_step = 1.0/ui_count
for i, (ui_h, ui_s) in enumerate(ui_colors):
    for j in range(ui_count):
        defcolor(name=f"UI_{i+1}_{j}", h=ui_h, s=ui_s, l=j*ui_l_step)

# Write out COLOR_{name}_RGB environment variables to stdout, test output to stderr

for i, color in enumerate(colors.values()):
    print(f"export COLOR_{color.name}_RGB='{color.to_rgbhex()}'")
    if i < 16:
        emit_test_output("this is some example text", bg=colors['BLACK'], fg=color)
    else:
        emit_test_output(f"                         {color.name}", bg=color, fg=colors['BRIGHT_WHITE'])
