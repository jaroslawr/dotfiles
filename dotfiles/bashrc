# GENERAL
#

# Define PROMPT_COMMAND as an array so following sections can add their own commands
PROMPT_COMMAND=()

# Source standard completions
source /usr/share/bash-completion/bash_completion

# Prevent Ctrl-S from freezing the terminal
stty -ixon

# FZF keybindings: cd with Alt-C, insert file path with Ctrl-T
source /usr/share/doc/fzf/examples/key-bindings.bash

# Set tmux title to simply "bash"
tmux_title() {
    echo -ne "\033]0;\a"
}
PROMPT_COMMAND+=("tmux_title")

# ENVIRONMENT
#

export EDITOR=nvim
export FZF_DEFAULT_OPTS="--tiebreak=index --no-mouse --no-bold \
    --layout=reverse --preview-window=down,border-top --margin 0,1 \
    --color 16,prompt:2,hl:2,hl+:2,fg+:3,pointer:3 \
    --bind shift-left:preview-page-up,shift-right:preview-page-down"
export FZF_TMUX=1
export LESS="--raw-control-chars --chop-long-lines --no-init"
export PATH="${HOME}/bin:${HOME}/go/bin:${PATH}"
export PROJECTS_DIR=~/Projects
export RIPGREP_CONFIG_PATH=~/.ripgreprc
export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/.ssh-agent.sock"

# HISTORY
#

# Huge history
HISTSIZE=100000
HISTFILESIZE=100000

# Append to history file instead of overwriting it
shopt -s histappend

# Save multi line commands literally, with newlines as entered
shopt -s lithist

# Write history before each priting of the prompt
PROMPT_COMMAND+=("history -a")

# PROMPT
#

# Color definitions
# Bash will garble output if these are not surrounded by []
RED="\[$(tput setaf 1)\]"
GREEN="\[$(tput setaf 2)\]"
YELLOW="\[$(tput setaf 3)\]"
BLUE="\[$(tput setaf 4)\]"
PURPLE="\[$(tput setaf 5)\]"
LIGHT_GRAY="\[$(tput setaf 8)\]"
RESET="\[$(tput setaf 15)\]"

# Set git-related variables for prompt
__update_git_status() {
    GIT_REPO=$(git rev-parse --git-dir 2>&1 >/dev/null && echo true || echo false)

    if [ "${GIT_REPO}" = true ]; then
        IFS=$'\t' read \
            GIT_PS1_BRANCH \
            GIT_PS1_COMMIT \
            GIT_PS1_STAGED \
            GIT_PS1_NONSTAGED \
            GIT_PS1_UNTRACKED \
            < <(git status --branch --porcelain=v2 | awk -f ~/bin/parse-git-status.awk)
    fi
}

# Update git status before displaying the prompt
PROMPT_COMMAND+=("__update_git_status")

# Print the git branch part of the prompt
__ps1_git_branch() {
    if [ "${GIT_REPO}" = true ]; then
        if [ "${GIT_PS1_BRANCH}" = "(detached)" ]; then
            echo "${GIT_PS1_COMMIT:0:8}"
        else
            echo "${GIT_PS1_BRANCH}"
        fi
    fi
}

# Print the git status part of the prompt
__ps1_git_status() {
    if [ "${GIT_REPO}" = true ]; then
        local status=""
        status+=$([ "${GIT_PS1_STAGED}" -gt 0 ] && echo "+" || echo "")
        status+=$([ "${GIT_PS1_NONSTAGED}" -gt 0 ] && echo "*" || echo "")
        status+=$([ "${GIT_PS1_UNTRACKED}" -gt 0 ] && echo "?" || echo "")
        echo "${status}"
    fi
}

# Set final prompt
__set_ps1() {
    local prompt
    if [ $? -eq 0 ]; then
        prompt="${GREEN}>${RESET}"
    else
        prompt="${RED}>${RESET}"
    fi
    export PS1="${YELLOW}\w ${PURPLE}$(__ps1_git_branch) ${LIGHT_GRAY}$(__ps1_git_status)
${prompt} "
}
PROMPT_COMMAND+=("__set_ps1")

# ALIASES
#

# cal with more readable output
cal() {
    ncal -M -b "$@"
}

# ls with more readable output
ls() {
    command ls \
        --color=auto \
        --group-directories-first \
        --literal \
        --time-style=long-iso \
        --human-readable \
        "$@"
}

# diff with colors and pager, unless running in a pipeline
diff() {
    if [[ -t 1 ]]; then
        command diff --color=always "$@" | less -FRS
    else
        command diff "$@"
    fi
}

# rg with colors and pager, unless running in a pipeline
rg() {
    if [[ -t 1 ]]; then
        command rg --color=always --line-number "$@" | less -FRS
    else
        command rg "$@"
    fi
}

# COMPLETION FUNCTIONS
#

# Complete directory paths using prefix or infix matches
__matching_dir_paths() {
    # Root directory under which to look for matching directory path
    local root="$1"

    # Input string to complete
    local input="$2"

    # Part of input until and including the last /
    # it should consitute an already complete valid path,
    # otherwise we should not attempt completion
    local input_complete_part

    # Part of input_string after last /
    # this is the part that we actually try to complete
    local input_incomplete_part

    # Where to look for directory names to complete
    local find_root

    if [[ "${input}" =~ / ]]; then
        input_complete_part="${input%/*}/"
        input_incomplete_part="${input##*/}"
        find_root="${root}/${input_complete_part}"
    else
        input_complete_part=""
        input_incomplete_part="${input}"
        find_root="${root}"
    fi

    declare -a prefix_matches
    declare -a infix_matches

    while IFS=$'\n' read -r matched_path; do
        local match
        if [[ "${matched_path}" =~ / ]]; then
            match="${matched_path##*/}"
        else
            match="${matched_path}"
        fi

        if [[ "${match}" =~ ^${input_incomplete_part} ]]; then
            prefix_matches+=("${matched_path}/")
        else
            infix_matches+=("${matched_path}/")
        fi
    done < <(find "${find_root}" -mindepth 1 -maxdepth 1 -type d -name "*${input_incomplete_part}*" -printf "${input_complete_part}%P\n" | LC_ALL=C sort)

    COMPREPLY=("${prefix_matches[@]}" "${infix_matches[@]}")
}

_cd_with_infix_completion() {
    __matching_dir_paths "." "${COMP_WORDS[-1]}"
}

complete -F _cd_with_infix_completion -o nospace -o nosort cd

# FUNCTIONS
#

# open notes
nt() {
    $EDITOR ~/Notes/notes.md
}

# FUNCTIONS - PROJECTS
#

# cd to project
cdp() {
    local project_dir="${PROJECTS_DIR}/$1"
    if [ -d "${project_dir}" ]; then
        cd "${project_dir}"
    else
        echo "Project does not exist"
    fi
}

_cdp() {
    __matching_dir_paths "${PROJECTS_DIR}" "${COMP_WORDS[-1]}"
}

complete -F _cdp -o nospace -o nosort cdp

# cd to project root
cdpr() {
    local cwd=$(pwd)
    if [[ "${cwd}" =~ ^${PROJECTS_DIR}/.+$ ]]; then
        local project=$(echo "${cwd}" | cut -c "$((${#PROJECTS_DIR}+1))-" | cut -d/ -f2)
        cd "${PROJECTS_DIR}/${project}"
    else
        echo "Not in a project"
    fi
}

# FUNCTIONS - DIRECTORY TREES
#

# directory tree - with pager, unless running in a pipeline

t() {
    if [[ -t 1 ]]; then
        command rl "$@" | less -FRS
    else
        command rl "$@"
    fi
}

complete -F __dirs_with_infix -o nospace -o nosort t

# directory tree - edit in vim

vt() {
    command rl "$@" | $EDITOR \
        -c ":lua require('filelist').load()" \
        -c ":bdelete!"
}

complete -F __dirs_with_infix -o nospace -o nosort vt

# FUNCTIONS - GIT
#

# git log browser
lg() {
    declare -a args
    declare -a paths

    while [ $# -gt 0 ]; do
        if [ "$1" == "--" ]; then
            shift
            while [ $# -gt 0 ]; do
                paths+=("$1")
                shift
            done
        else
            args+=("$1")
            shift
        fi
    done

    if [ ${#paths[@]} -eq 0 ]; then
        paths=(".")
    fi

    local paths_expanded=$(printf "%q " "${paths[@]}")

    git lg --color=always "${args[@]}" -- "${paths[@]}" | \
        fzf \
        --ansi \
        --preview="git show --color=always {1} -- ${paths_expanded}" \
        --bind="ctrl-m:execute:(git show --color=always {1} -- ${paths_expanded} | less -CRX)"
}

