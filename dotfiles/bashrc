# ENVIRONMENT
#

# General
export PATH="${HOME}/bin:${HOME}/go/bin:${PATH}"
export EDITOR=nvim

# Virtualenv (actually only used by bashrc)
export DEFAULT_VIRTUAL_ENV="home"

# Less
export LESS="--raw-control-chars --chop-long-lines --no-init"

# Ripgrep
export RIPGREP_CONFIG_PATH=~/.ripgreprc

# Ssh-agent
export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/.ssh-agent.sock"

# Color definitions
source ~/.colors

# LS_COLORS
eval $(dircolors ~/.dircolors)

# GENERAL
#

# Define PROMPT_COMMAND as an array so following sections can add their own commands
PROMPT_COMMAND=()

# Set tmux title to simply "bash"
__set_tmux_title() {
    echo -ne "\033]0;\a"
}
PROMPT_COMMAND+=("__set_tmux_title")

# Functions added to PRECMDS will be executed each time a command is about to execute
PRECMDS=()
__execute_precmds() {
    # Skip execution for commands in PROMPT_COMMAND
    local prompt_command
    for prompt_command in "${PROMPT_COMMAND[@]}"; do
        if [[ "${BASH_COMMAND}" == "${prompt_command}" ]]; then
            return
        fi
    done

    # Execute PRECMDs
    local cmd
    for cmd in "${PRECMDS[@]}"; do
        "${cmd}"
    done
}
trap __execute_precmds DEBUG

# Prevent Ctrl-S from freezing the terminal
stty -ixon

# FZF
#

# Default fzf command
export FZF_DEFAULT_COMMAND="maybe-git-ls"

# Default fzf options
FZF_OPTS=()
FZF_OPTS+=(--layout=reverse)
FZF_OPTS+=(--preview-window=down,border-top)
FZF_OPTS+=(--margin 0,1)
FZF_OPTS+=(--color 16,hl:9,hl+:9,prompt:11,fg+:11,pointer:11)
FZF_OPTS+=(--no-bold)
FZF_OPTS+=(--no-mouse)
FZF_OPTS+=(--cycle)
FZF_OPTS+=(--tiebreak=begin,index)
FZF_OPTS+=(--bind shift-left:preview-page-up,shift-right:preview-page-down)
export FZF_DEFAULT_OPTS="${FZF_OPTS[@]}"

# Source of paths for ** completion
_fzf_compgen_path() {
    if [[ $(realpath "$1") == $PWD ]]; then
        maybe-git-ls
    else
        maybe-git-ls "$1"
    fi
}

# DEPENDENCIES
#

# Source standard completions
source /usr/share/bash-completion/bash_completion

# FZF completion, makes **<TAB> work
source /usr/share/doc/fzf/examples/completion.bash

# FZF keybindings: cd with Alt-C, insert paths with Ctrl-T, make Ctrl-R use fzf for history search
source /usr/share/doc/fzf/examples/key-bindings.bash

# Virtualenvwrapper
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh

# HISTORY
#

# Huge history
HISTSIZE=100000
HISTFILESIZE=100000

# Append to history file instead of overwriting it
shopt -s histappend

# Save multi line commands literally, with newlines as entered
shopt -s lithist

# Save history each time a command is about to execute
__save_history() { history -a; }
PRECMDS+=("__save_history")

# PROMPT
#

# Prompt styling
PS1_PROMPT_CHAR="Â»"
PS1_COLOR_PWD="${COLOR_BRIGHT_YELLOW}"
PS1_COLOR_GIT_BRANCH="${COLOR_BRIGHT_MAGENTA}"
PS1_COLOR_GIT_STATUS="${COLOR_BRIGHT_GRAY}"
PS1_COLOR_GIT_AHEAD="${COLOR_BRIGHT_GREEN}"
PS1_COLOR_GIT_BEHIND="${COLOR_BRIGHT_RED}"
PS1_COLOR_VENV="${COLOR_BRIGHT_BLUE}"
PS1_COLOR_PROMPT_SUCCESS="${COLOR_BRIGHT_GREEN}"
PS1_COLOR_PROMPT_FAILURE="${COLOR_BRIGHT_RED}"
PS1_COLOR_RESET="${COLOR_BRIGHT_WHITE}"

# Set git-related variables for prompt
__update_git_status() {
    GIT_REPO=$(git rev-parse --git-dir 2>&1 >/dev/null && echo true || echo false)

    if [ "${GIT_REPO}" = true ]; then
        GIT_PS1_STAGED=""
        GIT_PS1_NONSTAGED=""
        GIT_PS1_UNTRACKED=""
        GIT_PS1_AHEAD=""
        GIT_PS1_BEHIND=""

        declare -a fields
        while IFS=$' ' read -r -a fields; do
            case "${fields[0]}" in
                "#")
                    case "${fields[1]}" in
                        "branch.head")
                            GIT_PS1_BRANCH="${fields[2]}"
                            ;;
                        "branch.oid")
                            GIT_PS1_COMMIT="${fields[2]}"
                            ;;
                        "branch.ab")
                            [[ "${fields[2]}" -gt 0 ]] && GIT_PS1_AHEAD="${fields[2]}"
                            [[ "${fields[3]}" -lt 0 ]] && GIT_PS1_BEHIND="${fields[3]}"
                            ;;
                    esac
                    ;;
                "1")
                    if [[ "${fields[1]:0:1}" != "." ]]; then
                        GIT_PS1_STAGED="+"
                    fi
                    if [[ "${fields[1]:1:1}" != "." ]]; then
                        GIT_PS1_NONSTAGED="*"
                    fi
                    ;;
                "?")
                    GIT_PS1_UNTRACKED="?"
                    ;;
            esac
        done < <(git status --branch --porcelain=v2)
    fi
}

# Update git status before displaying the prompt
PROMPT_COMMAND+=("__update_git_status")

# Print the git branch part of the prompt
__ps1_git_branch() {
    if [[ "${GIT_REPO}" == true ]]; then
        local branch
        if [[ "${GIT_PS1_BRANCH}" == "(detached)" ]]; then
            branch="${GIT_PS1_COMMIT:0:8}"
        else
            branch="${GIT_PS1_BRANCH}"
        fi
        printf "${PS1_COLOR_GIT_BRANCH}${branch}${PS1_COLOR_RESET} "
    fi
}

# Print the git status part of the prompt
__ps1_git_status() {
    if [[ "${GIT_REPO}" == true ]]; then
        local local_status="${GIT_PS1_STAGED}${GIT_PS1_NONSTAGED}${GIT_PS1_UNTRACKED}"

        declare -a fields
        [[ -n "${local_status}" ]] && fields+=("${PS1_COLOR_GIT_STATUS}${local_status}${PS1_COLOR_RESET}")
        [[ -n "${GIT_PS1_AHEAD}" ]] && fields+=("${PS1_COLOR_GIT_AHEAD}${GIT_PS1_AHEAD}${PS1_COLOR_RESET}")
        [[ -n "${GIT_PS1_BEHIND}" ]] && fields+=("${PS1_COLOR_GIT_BEHIND}${GIT_PS1_BEHIND}${PS1_COLOR_RESET}")

        if [[ "${#fields[@]}" -gt 0 ]]; then
            # Join fields with spaces and print
            local first="${fields[0]}"
            local rest=("${fields[@]:1}")
            local sep=" "
            printf %s "${first}" "${rest[@]/#/${sep}}"
        fi
    fi
}

# Virtualenv
__ps1_virtualenv() {
    local virtual_env="${VIRTUAL_ENV##*/}"
    [[ "${virtual_env}" == "" ]] && printf "" || printf "${PS1_COLOR_VENV}v:${virtual_env}${PS1_COLOR_RESET} "
}

# Set final prompt
__set_ps1() {
    local status=$?
    local prompt

    if [[ "${status}" -eq 0 ]]; then
        prompt="${PS1_COLOR_PROMPT_SUCCESS}${PS1_PROMPT_CHAR}${PS1_COLOR_RESET}"
    else
        prompt="${PS1_COLOR_PROMPT_FAILURE}${PS1_PROMPT_CHAR}${PS1_COLOR_RESET}"
    fi
    export PS1="${PS1_COLOR_PWD}\w $(__ps1_virtualenv)$(__ps1_git_branch)$(__ps1_git_status) 
${prompt} "
}
PROMPT_COMMAND+=("__set_ps1")

# PROJECTS
#

# Root directory with projects
export PROJECTS_ROOT_DIR=~/Projects

# Test if current working directory inside a project
__is_pwd_in_project() {
    [[ "${PWD}" == ${PROJECTS_ROOT_DIR}/* ]]
}

# Print current project name
__current_project() {
    local project_and_path="${PWD#"${PROJECTS_ROOT_DIR}/"}"
    local project="${project_and_path%%/*}"
    printf "${project}\n"
}

# cd to project
cdp() {
    if [[ $# -eq 0 ]]; then
        __cdp_up_to_project_root
    elif [[ $# -eq 1 ]]; then
        __cdp_to_project_path "${@}"
    else
        printf "cdp: 0 or 1 arguments necesary, $# supplied\n"
    fi
}

__cdp_up_to_project_root() {
    if __is_pwd_in_project; then
        local project_and_path="${PWD#"${PROJECTS_ROOT_DIR}/"}"
        local project="${project_and_path%%/*}"
        cd "${PROJECTS_ROOT_DIR}/${project}"
    else
        echo "cdp: not in a project"
    fi
}

__cdp_to_project_path() {
    local project_name="${1%%/*}"
    local project_relative_path=""
    if [[ $1 =~ / ]]; then
        project_relative_path="${1#*/}"
    fi

    local project_root="${PROJECTS_ROOT_DIR}/${project_name}"

    if [[ -d "${project_root}" ]]; then
        local destination_path="${project_root}/${project_relative_path}"
        if [[ -d "${destination_path}" ]]; then
            cd "${destination_path}"
        else
            printf "cdp: '%s' directory in project '%s' does not exist\n" "${project_relative_path}" "${project_name}"
        fi
    else
        printf "cdp: project '%s' does not exist\n" "${project_name}"
    fi
}

__complete_cdp() {
    __complete_directory_path_under_root "${COMP_WORDS[1]}" "${PROJECTS_ROOT_DIR}"
}

complete -F __complete_cdp -o filenames -o nospace -o nosort cdp

# cd to projects root
cdpr() {
    cd "${PROJECTS_ROOT_DIR}"
}

# VIRTUALENV
#

# Select adequate venv given current working directory (default or
# project-based)
__select_venv() {
    # Forcing reload is necessary for starting tmux from an existing shell tmux
    # will inherit environment of calling shell with VIRTUAL_ENV variables
    # etc., but starting the login shell will overwrite PATH
    local force_reload="$1"
    local active_virtual_env="${VIRTUAL_ENV##*/}"

    if __is_pwd_in_project; then
        # Inside projects directory,
        # activation or change of virtualenv possibly needed

        local pwd_relative_to_projects_home=${PWD#"${PROJECTS_ROOT_DIR}/"}
        local current_project=${pwd_relative_to_projects_home%%/*}

        if [[ "${force_reload}" || "${active_virtual_env}" != "${current_project}" ]]; then
            local virtualenv
            while IFS= read -r virtualenv; do
                if [[ "${virtualenv}" == "${current_project}" ]]; then
                    printf "Activating virtualenv: %s\n" "${current_project}"
                    workon "${virtualenv}"
                    return
                fi
            done < <(lsvirtualenv -b)
        else
            return
        fi
    fi

    if [[ -n "${DEFAULT_VIRTUAL_ENV}" ]]; then
        if [[ "${force_reload}" || "${active_virtual_env}" != "${DEFAULT_VIRTUAL_ENV}" ]]; then
            printf "Activating default virtualenv: ${DEFAULT_VIRTUAL_ENV}\n"
            workon "${DEFAULT_VIRTUAL_ENV}"
        fi
    else
        printf "Deactivating virtualenv\n"
        deactivate
    fi
}

# Select venv based on pwd on bash startup
if [ -t 1 ]; then
    __select_venv 1
fi

# cd with virtualenv support
cd() {
    local project_before=$(__current_project)
    command cd "$@"
    local project_after=$(__current_project)

    if [[ "${project_before}" != "${project_after}" ]]; then
        __select_venv
    fi
}

# ALIASES
#

# ls with more readable output
ls() {
    LC_ALL=C command ls \
        --color=auto \
        --group-directories-first \
        --literal \
        --time-style=long-iso \
        --human-readable \
        "$@"
}

# long-form ls with colors and pager, unless running in a pipeline
l() {
    if [[ -t 1 ]]; then
        ls -l --color=always "$@" | less -FRS
    else
        ls -l "$@"
    fi
}

# diff with colors and pager, unless running in a pipeline
diff() {
    if [[ -t 1 ]]; then
        command diff --color=always "$@" | less -FRS
    else
        command diff "$@"
    fi
}

# rg with colors and pager, unless running in a pipeline
rg() {
    if [[ -t 1 ]]; then
        command rg --color=always --heading --line-number "$@" | less -FRS
    else
        command rg "$@"
    fi
}

# cal with more readable output
cal() {
    ncal -M -b "$@"
}

# COMPLETION FUNCTIONS
#

# Given an input string and a root directory, complete the input string
# assuming it is an incomplete directory path within the root directory, using
# prefix or infix completion of the last path component of the input
__complete_directory_path_under_root() {
   # Input string to complete
    local input="$1"

    # Root directory under which to look for matching directory path,
    # used only if input is a relative path
    local root="$2"

    # Expand ~ in input if present
    if [[ "${input}" =~ ^~ ]]; then
        input="${HOME}/${input#"~/"}"
    fi

    # Part of input until and including the last /
    # it should consitute an already complete valid path,
    # otherwise we should not attempt completion
    local complete_path

    # Part of input after last /
    # this is the part that we actually try to complete
    local incomplete_path

    # Split input string into complete and incomplete part
    if [[ "${input}" =~ / ]]; then
        complete_path="${input%/*}/"
        incomplete_path="${input##*/}"
    else
        complete_path=""
        incomplete_path="${input}"
    fi

    # Argument list for find
    declare -a find_args

    # Determine the directory in which to look for completion candidates
    if [[ "${complete_path}" =~ ^/ ]]; then
        # Case of absolute path
        find_args+=("${complete_path}")
    else
        # Case of relative path
        find_args+=("${root}/${complete_path}")
    fi

    # Look for immediate subdirectories
    find_args+=(-mindepth 1 -maxdepth 1 -type d)

    # Look for the substring in directory name
    find_args+=(-name "*${incomplete_path}*")

    # Ignore hidden directories unless the substring to search for starts with .
    if [[ ! "${incomplete_path}" =~ ^\. ]]; then
        find_args+=(-not -name ".*")
    fi

    # Print only names of matching directories
    find_args+=(-printf "%P\n")

    # Read and postprocess the completion candidates
    declare -a prefix_matches
    declare -a infix_matches
    local match
    while IFS= read -r match; do
        if [[ "${match}" =~ ^${incomplete_path} ]]; then
            prefix_matches+=("${complete_path}${match}")
        else
            infix_matches+=("${complete_path}${match}")
        fi
    done < <(find "${find_args[@]}" | LC_ALL=C sort)

    # Completion candidates consists of prefix matches followed by infix matches
    COMPREPLY=("${prefix_matches[@]}" "${infix_matches[@]}")
}
